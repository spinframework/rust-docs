searchState.loadedDescShard("spin_outbound_networking_config", 0, "Represents a single <code>allowed_outbound_hosts</code> item.\nRepresents an allowed_outbound_hosts config.\nAny scheme is allowed: <code>*://</code>\nA trait for handling disallowed hosts\nRepresents the host part of an allowed_outbound_hosts item.\nRepresents a single port specifier in an …\nAny scheme is allowed: <code>*://</code>\nA check for whether a URL is allowed by the outbound …\nA parsed URL used for outbound networking.\nRepresents the port part of an allowed_outbound_hosts item.\nThe domain used for service chaining.\nThe domain suffix used for service chaining.\nRepresents the scheme part of an allowed_outbound_hosts …\nAn easily cloneable, shared, boxed future of result\nReturns true if the given url is allowed.\nReturns true if any scheme is allowed (i.e. <code>*://</code>).\nReturns true if relative (“self”) requests to any of …\nChecks if allowed hosts permit relative requests\nChecks address against allowed hosts\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalled when a host is disallowed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this config is for service chaining …\nChecks if the host is a service chaining host.\nCreates a new <code>OutboundAllowedHosts</code> instance.\nParses the given string as an <code>allowed_hosts_config</code> item.\nParses the given allowed_outbound_hosts values, resolving …\nParses a URL.\nParses a service chaining target from a URL.\nValidates the given allowed_outbound_hosts values with the …\nA cheaply-clonable set of blocked networks\nAsIpAddr can be implemented to make an “IP-address-like…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true iff the given address is blocked.\nReturns true iff no networks are blocked.\nCreates a new <code>BlockedNetworks</code> instance with the given …\nRemoves and returns any addresses with blocked IPs from …\nHelpers for testing purposes\nConverts a string to an <code>IpNetwork</code>, panicking on failure.\nConverts a string to an <code>IpAddr</code>, panicking on failure.")